from array import array

firmware = array('Q', [0]) * 512

#ler uma instrução
#main: PC <- PC + 1; MBR <- read_byte(PC); GOTO MBR
firmware[0] =  0b000000000100001100101000010000010001

#X = X + mem[address]
##2: PC <- PC + 1; MBR <- read_byte(PC); GOTO 3
firmware[2] =  0b000000011000001100101000010000010001
##3: MAR <- MBR; read_word; GOTO 4
firmware[3] =  0b000000100000000100100001000000100010
##5: X <- MDR + X; GOTO 0
firmware[4] =  0b000000000000001101100000001000000101  

#mem[address] = X
##6: PC <- PC + 1; fetch; GOTO 7
firmware[6] =  0b000000111000001100101000010000010001
##7: MAR <- MBR; GOTO 8
firmware[7] =  0b000001000000000100100001000000000010
##8: MDR <- X; write; GOTO 0
firmware[8] =  0b000000000000000100100000100001000011

#goto address
##9: PC <- PC + 1; fetch; GOTO 10
firmware[9] =  0b000001010000001100101000010000010001
##10: PC <- MBR; fetch; GOTO MBR
firmware[10] = 0b000000000100000100100000010000010010

#if X = 0 then goto address
## 11: X <- X; IF ALU = 0 GOTO 268 (100001100) ELSE GOTO 12(000001100)
firmware[11] = 0b000001100001000100100000001000000011
## 12: PC <- PC + 1; GOTO 0
firmware[12] = 0b000000000000001100101000010000000001
## 268: GOTO 9
firmware[268] =0b000001001000000000000000000000000000

#X = X - mem[address]
##13: PC <- PC + 1; fetch; goto 14
firmware[13] = 0b000001110000001100101000010000010001
##14: MAR <- MBR; read; goto 15
firmware[14] = 0b000001111000000100100001000000100010
##16: X <- X - MDR; goto 0
firmware[15] = 0b000000000000001101111000001000000101

#X = mem[address]
##17: PC <- PC + 1; MBR <- read_byte(PC); GOTO 18
firmware[17] = 0b000010010000001100101000010000010001
##18: MAR <- MBR; read_word; GOTO 19
firmware[18] = 0b000010011000000100100001000000100010
##19: X <- MDR; GOTO 0
firmware[19] = 0b000000000000000101000000001000000000

#Y = mem[address]
##20: PC <- PC + 1; MBR <- read_byte(PC); GOTO 21
firmware[20] = 0b000010101000001100101000010000010001
##21: MAR <- MBR; read_word; GOTO 22
firmware[21] = 0b000010110000000100100001000000100010
##22: Y <- MDR; GOTO 0
firmware[22] = 0b000000000000000101000000000100000000

#Y = Y - mem[address]
##23: PC <- PC + 1; fetch; goto 24
firmware[23] = 0b000011000000001100101000010000010001
##24: MAR <- MBR; read; goto 25
firmware[24] = 0b000011001000000100100001000000100010
##25: Y <- Y - MDR; goto 0
firmware[25] = 0b000000000000001101111000000100000110

#X = Y; goto 0
firmware[26] = 0b000000000000000100100000001000000111

#Y = Y + mem[address]
##23: PC <- PC + 1; fetch; goto 24
firmware[27] = 0b000011100000001100101000010000010001
##24: MAR <- MBR; read; goto 25
firmware[28] = 0b000011101000000100100001000000100010
##25: Y <- Y + MDR; goto 0
firmware[29] = 0b000000000000001101100000000100000110

#X = X + Y; goto 0
firmware[30] = 0b000000000000001101100000001000000111

#X = X%2; goto 0
firmware[31] = 0b000000000000000110100000001000000011

#Y = Y%2; goto 0
firmware[32] = 0b000000000000000110100000000100000100

#X = 0
firmware[34] = 0b000000000000000100000000001000000000

#Y = 0
firmware[35] = 0b000000000000000100000000000100000000

#X = -X
firmware[36] = 0b000000000000001101011000001000000111

#Y = X; goto 0
firmware[37] = 0b000000000000000101000000000100000111


# PARA IMPLEMENTAR O FOR!!!
#H = H + 1; goto 0
firmware[38] = 0b000000000000001101001000000010000001

# PARA IMPLEMENTAR O FOR!!!
#H = H - 1; goto 0
firmware[39] = 0b000000000000001100110000000010000000


#X = X * mem[address]
##40: PC <- PC + 1; fetch; goto 41
firmware[40] = 0b000101001000001100101000010000010001
##41: MAR <- MBR; read; goto 42
firmware[41] = 0b000101010000000100100001000000100010
##42: B <- (MDR > X); IF Y != 0 GO TO 299 (100101011); ELSE GO TO 43
firmware[42] = 0b000101011010000011100010000000000101
##299: B <- X; GO TO 300 (100101100)
firmware[299] =0b100101100000000101000010000000000111
##299: X <- MDR; GO TO 44 
firmware[300] =0b000101100000000101000000001000000101
##43: B <- MDR; goto 44
firmware[43] = 0b000101100000000101000010000000000110
##44: A <- X; goto 45
firmware[44] = 0b000101101000000100100100000000000011 
##45: X <- 0; goto 46
firmware[45] = 0b000101110000000100000000001000000011
##46: IF B != 0 GO TO 303(100110000); ELSE GOTO 47 (HAULT)
firmware[46] = 0b000101111010000100100010000000000100
#47: GO TO 0;
firmware[47] = 0b000000000000000100100000001000000011
##303: X <- X + A; goto 304
firmware[303] =0b100110000000001101100000001000001010
##304: B <- B - 1; goto 45
firmware[304] =0b000101110000001100110010000000001001


#if Y = 0 then goto address
## 48: Y <- Y; IF ALU = 0 GOTO 305 (100110001) ELSE GOTO 49(000110001)
firmware[48] = 0b000110001001000100100000000100000100
## 49: PC <- PC + 1; GOTO 0
firmware[49] = 0b000000000000001100101000010000000001
## 305: GOTO 9
firmware[305] =0b000001001000000000000000000000000000

#mem[address] = Y
##50: PC <- PC + 1; fetch; GOTO 51
firmware[50] =  0b000110011000001100101000010000010001
##51: MAR <- MBR; GOTO 52
firmware[51] =  0b000110100000000100100001000000000010
##52: MDR <- Y; write; GOTO 0
firmware[52] =  0b000000000000000100100000100001000110


#if X%2 = 0 then goto address
## 55: A <- X%2; IF ALU = 0 GOTO 311 (100110111) ELSE GOTO 56(000111000)
firmware[55] = 0b000111000001000110100100000000000011
## 312: GOTO 9
firmware[312] =0b000001001000000000000000000000000000
## 56: PC <- PC + 1; GOTO 0
firmware[56] = 0b000000000000001100101000010000000001


## 57: A <- X>Y; IF ALU = 0 GOTO 313 () ELSE GOTO 58(000111010)
firmware[57] = 0b000111010001000011100100000000000111
## 314: GOTO 9
firmware[314] =0b000001001000000000000000000000000000
## 58: PC <- PC + 1; GOTO 0
firmware[58] = 0b000000000000001100101000010000000001

#if Y%2 = 0 then goto address
## 59: B <- Y%2; IF ALU = 0 GOTO 316 (100110111) ELSE GOTO 60(000111000)
firmware[59] = 0b000111100001000110100010000000000100
## 314: GOTO 9
firmware[316] =0b000001001000000000000000000000000000
## 60: PC <- PC + 1; GOTO 0
firmware[60] = 0b000000000000001100101000010000000001


# H = X
firmware[61] = 0b000000000000000100100000000010000011

# H = Y
firmware[62] = 0b000000000000000100100000000010000100

# H = 0
firmware[63] = 0b000000000000000100000000000010000000

# H = mem[address]
##64: PC <- PC + 1; MBR <- read_byte(PC); GOTO 18
firmware[64] = 0b001000001000001100101000010000010001 
##65: MAR <- MBR; read_word; GOTO 19
firmware[65] = 0b001000010000000100100001000000100010
##66: H <- MDR; GOTO 0
firmware[66] = 0b000000000000000101000000000010000000


# if 0 > x = 1 go to address (x positivo ou negativo)
## 67: A <- 0;
firmware[67] = 0b001000100000000100000100000000000000
## 68: A = 0 > X; IF A == 0; GO TO 325(101000110); ELSE GO TO 69
firmware[68] = 0b001000101010000011100100000000000011
## 325: GOTO 9
firmware[325] =0b000001001000000000000000000000000000
## 69: PC <- PC + 1; GOTO 0
firmware[69] = 0b000000000000001100101000010000000001

# if 0 > y = 1 go to address (y positivo ou negativo)
## 70: A <- 0;
firmware[70] = 0b001000111000000100000000000010000000
## 71: A = 0 > Y; IF A == 0; GO TO 325(101000110); ELSE GO TO 69
firmware[71] = 0b001001000010000011100100000000000100
## 328: GOTO 9
firmware[328] =0b000001001000000000000000000000000000
## 72: PC <- PC + 1; GOTO 0
firmware[72] = 0b000000000000001100101000010000000001



#Y = Y * mem[address]
##73: PC <- PC + 1; fetch; goto 74
firmware[73] =  0b001001010000001100101000010000010001
##74: MAR <- MBR; read; goto 75
firmware[74] =  0b001001011000000100100001000000100010
##75: A <- (MDR > Y); IF X != 0 GO TO 332 (101001100); ELSE GO TO 76
firmware[75] =  0b001001100010000011100100000000000110
##332: A <- Y; GO TO 300 (100101100)
firmware[332] = 0b101001101000000100100100000000000111
##333: Y <- MDR; GO TO 77 
firmware[333] = 0b001001101000000101000000000100000110
##76: A <- MDR; goto 77
firmware[76] =  0b001001101000000101000100000000000101
##77: B <- Y; goto 78
firmware[77] =  0b001001110000000100100010000000000100 
##78: Y <- 0; goto 79
firmware[78] =  0b001001111000000100000000000100000100
##79: IF A == 0 GO TO 336(100110000); ELSE GOTO 80 (HALT)
firmware[79] =  0b001010000010000100100100000000001000
#80: GO TO 0;
firmware[80] =  0b000000000000000100100000000100000100
##336: Y <- Y + B; goto 337
firmware[336] = 0b101010001000001101100000000100001101
##337: A <- A - 1; goto 79
firmware[337] = 0b001001111000001100110100000000001000


#Y = Y / mem[address]
##81: PC <- PC + 1; GO TO 82
firmware[81] =  0b001010010000001100101000010000010001
##82: MAR <- MBR; GO TO 83
firmware[82] =  0b001010011000000100100001000000100010
##83: A <- (MDR > Y); IF A != 0 GO TO HALT (); ELSE GO TO 84 
firmware[83] =  0b001010100010000011100100000000000110
##340 Y <- 0; GO TO 0;
firmware[340] = 0b000000000000000100000000000100000100
##84: B <- Y; GO TO 85
firmware[84] =  0b001010101000000100100010000000000100
##85: Y <- 0; GO TO 86
firmware[85] =  0b001010110000000100000000000100000100
##86: A <- (MDR > B); IF A != 0 GO TO HALT 343(101010111); ELSE GO TO 87
firmware[86] =  0b001010111010000011100100000000001111
##343 Y <- Y; GO TO 0; 
firmware[343] = 0b000000000000000100100000000100000100
##87: Y <- Y + 1; GO TO 88
firmware[87] =  0b001011000000001100101000000100000100
##88: B = B - MDR; GO TO 86;
firmware[88] =  0b001010110000001101111010000000001111


#X = X / mem[address]
##89: PC <- PC + 1; GO TO 90
firmware[89] =  0b001011010000001100101000010000010001
##90: MAR <- MBR; GO TO 91
firmware[90] =  0b001011011000000100100001000000100010
##91: B <- (MDR > X); IF B != 0 GO TO HALT (); ELSE GO TO 92
firmware[91] =  0b001011100010000011100010000000000101
##348 X <- 0; GO TO 0;
firmware[348] = 0b000000000000000100000000000100000011
##92: A <- X; GO TO 93
firmware[92] =  0b001011101000000100100100000000000011
##93: X <- 0; GO TO 94
firmware[93] =  0b001011110000000100000000001000000011
##94: B <- (MDR > A); IF Y != 0 GO TO HALT 351(101010111); ELSE GO TO 95
firmware[94] =  0b001011111010000011100010000000001110
##343 X <- X; GO TO 0; 
firmware[351] = 0b000000000000000100100000001000000011
##95: X <- X + 1; GO TO 96
firmware[95] =  0b001100000000001100101000001000000011
##96: A = A - MDR; GO TO 94;
firmware[96] =  0b001011110000001101111100000000001110


#X = X % mem[address]
##97: PC <- PC + 1; GO TO 98
firmware[97] =   0b001100010000001100101000010000010001
##98: MAR <- MBR; GO TO 99
firmware[98] =   0b001100011000000100100001000000100010
##99: B <- (MDR > X); IF B != 0 GO TO HALT (); ELSE GO TO 100
firmware[99] =   0b001100100010000011100010000000000101
##356 X <- X; GO TO 0;
firmware[356] =  0b000000000000000100100000001000000011
##100: A <- X; GO TO 101
firmware[100] =  0b001100101000000100100100000000000011
##101: X <- 0; GO TO 102
firmware[101] =  0b001100110000000100000000001000000011
##102: B <- (MDR > A); IF B != 0 GO TO HALT 351(101010111); ELSE GO TO 103
firmware[102] =  0b001100111010000011100010000000001110
##359 X <- A; GO TO 0; 
firmware[359] =  0b000000000000000100100000001000001000
##103: X <- X + 1; GO TO 104
firmware[103] =  0b001101000000001100101000001000000011
##104: A = A - MDR; GO TO 102;
firmware[104] =  0b001100110000001101111100000000001110


#Y = Y % mem[address]
##105: PC <- PC + 1; GO TO 106
firmware[105] =  0b001101010000001100101000010000010001
##106: MAR <- MBR; GO TO 107
firmware[106] =  0b001101011000000100100001000000100010
##107: A <- (MDR > Y); IF A != 0 GO TO HALT (); ELSE GO TO 84 
firmware[107] =  0b001101100010000011100100000000000110
##364 Y <- Y; GO TO 0;
firmware[364] =  0b000000000000000100100000000100000100
##108: B <- Y; GO TO 109
firmware[108] =  0b001101101000000100100010000000000100
##109: Y <- 0; GO TO 110
firmware[109] =  0b001101110000000100000000000100000100
##110: A <- (MDR > B); IF X != 0 GO TO HALT 343(101010111); ELSE GO TO 87
firmware[110] =  0b001101111010000011100100000000001111
##367 Y <- B; GO TO 0; 
firmware[367] =  0b000000000000000100100000000100001001
##111: Y <- Y + 1; GO TO 112
firmware[111] =  0b001110000000001100101000000100000100
##112: B = B - MDR; GO TO 110;
firmware[112] =  0b001101110000001101111010000000001111


#X = X + 1; goto 0
firmware[113] =  0b000000000000001100101000001000000011

#X = X - 1; goto 0
firmware[114] =  0b000000000000001100110000001000000011

#Y = Y + 1; goto 0
firmware[115] =  0b000000000000001100101000000100000100

#Y = Y - 1; goto 0
firmware[116] =  0b000000000000001100110000000100000100


#X = X * Y
##117: A = X > Y; IF A = true GO TO 374 (); ELSE GO TO 118
firmware[117] = 0b001110110001000011100100000000000111
##374: A = Y GO TO 375
firmware[374] = 0b101110111000000100100100000000000100
##375: B = X; GO TO 120
firmware[375] = 0b001111000000000101000010000000000111
##118: A = X; goto 119
firmware[118] = 0b001110111000000100100100000000000011
##119: B = Y; goto 120
firmware[119] = 0b001111000000000100100010000000000100 
##119: X = 0; goto 121
firmware[120] = 0b001111001000000100000000001000000011 
##120: B = B; IF Y = 0; goto 377 ELSE GOTO 122
firmware[121] = 0b001111010001000100100010000000001001
#377 X = X; GO TO 0
firmware[378] = 0b000000000000000100100000001000000011
##121 B = B - 1; GO TO 123
firmware[122] = 0b001111011000001100110010000000001001
##122 X = A + X
firmware[123] = 0b001111001000001101100000001000001010

#X = 1
firmware[124] = 0b000000000000001100001000001000000000

#Y = 1
firmware[125] = 0b000000000000001100001000000100000000

# X = X/2 (Shift bit)
firmware[126] = 0b000000000000100100100000001000000011

#if H = 0 then goto address
##127: H <- H; IF ALU = 0 GOTO 384 ELSE GOTO 49(000110001)
firmware[127] = 0b010000000001000100100000000010000000
##384: GOTO 9 
firmware[384] = 0b000001001000000000000000000000000000
##128 : PC <- PC + 1; GOTO 0
firmware[128] = 0b000000000000001100101000010000000001

#H = 1
firmware[129] = 0b000000000000001100001000000010000000

#if (X == Y) = 1 then goto address
##130: A <- X = Y; IF ALU = 1 GOTO 384 ELSE GOTO 49(000110001)
firmware[130] = 0b010000011010001111100100000000000111
##387: GOTO 9 
firmware[387] = 0b000001001000000000000000000000000000
##131 : PC <- PC + 1; GOTO 0
firmware[131] = 0b000000000000001100101000010000000001

#if A = H > Y; A = 0 then goto address
##132: A <- H > Y; IF ALU = 0 GOTO 384 ELSE GOTO 49(000110001)
firmware[132] = 0b010000101001000011100100000000000100
##384: GOTO 9 
firmware[389] = 0b000001001000000000000000000000000000
##128 : PC <- PC + 1; GOTO 0
firmware[133] = 0b000000000000001100101000010000000001

# X = X + H + 1
firmware[134] = 0b000000000000001101101000001000000011

#mem[address] = H
##135: PC <- PC + 1; fetch; GOTO 136
firmware[135] =  0b010001000000001100101000010000010001
##136: MAR <- MBR; GOTO 137
firmware[136] =  0b010001001000000100100001000000000010
##137: MDR <- H; write; GOTO 0
firmware[137] =  0b000000000000000100100000100001000000

#halt:
firmware[255] = 0b000000000000000000000000000000000000 

